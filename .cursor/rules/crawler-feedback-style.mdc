# 크롤러 터미널 피드백 스타일 규칙

- rich 라이브러리의 Progress, Spinner, 컬러, 아이콘, 상태 메시지 등을 적극 활용
- 진행률 바(Progress Bar)와 스피너(Spinner)를 사용해 기사별/작업별 진행 상황을 실시간으로 시각화
- 성공 시 초록색 체크(✔), 실패 시 빨간색 X(✖) 등 명확한 아이콘과 컬러 메시지 사용
- 카테고리/작업 시작, 완료, 요약 등은 굵은 글씨와 구분선(rule)로 강조
- 기사별 상태 메시지는 한 줄씩 실시간으로 출력하며, 성공/실패/오류 등 상태를 명확히 구분
- rich의 Theme을 활용해 success, fail, info 등 스타일을 미리 지정해 사용
- 중첩 Live/스피너는 피하고, 한 번에 하나의 Progress Bar만 사용(중첩 Live 오류 방지)
- 전체 작업 완료 시 요약/결과를 컬러와 구분선으로 강조

## 예시 코드 패턴
```python
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn, TimeElapsedColumn
from rich.theme import Theme

console = Console(theme=Theme({
    "success": "bold green",
    "fail": "bold red",
    "info": "bold cyan"
}))

def print_status(msg, status="info"):
    console.print(msg, style=status)

with Progress(
    SpinnerColumn(),
    TextColumn("[progress.description]{task.description}"),
    BarColumn(),
    "[progress.percentage]{task.percentage:>3.0f}%",
    TimeElapsedColumn(),
    console=console,
) as progress:
    task = progress.add_task(f"기사 추출 중...", total=total)
    for i, (url, title) in enumerate(links_and_titles, 1):
        progress.update(task, advance=1, description=f"({i}/{total}) {title[:30]}")
        try:
            ...
            print_status(f"✔ {title[:40]} ... 성공", "success")
        except Exception as e:
            print_status(f"✖ {title[:40]} ... 오류: {e}", "fail")
```

---

- 추후 "크롤러 스타일로 터미널 피드백 적용" 요청 시 이 규칙을 참고해 동일하게 적용할 것.
